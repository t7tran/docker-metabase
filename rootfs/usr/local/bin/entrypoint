#!/usr/bin/env bash

[[ -n "$MB_ENTRYPOINT_DEBUG" ]] && set -x

if [[ -d "$MB_PLUGINS_DIR" ]]; then
	cp -n /opt/plugins/*.jar "$MB_PLUGINS_DIR"
fi

if [[ "${MB_AUTO_SETUP:-true}" != "true" ]]; then
	exec "$@"
fi

SESSIONID=

invoke() {
	local cmd=( curl )
	[[ "$1" == "GET" || "$1" == "PUT" || "$1" == "POST" || "$1" == "DELETE" ]] && cmd=( curl -X $1 ) && shift

	local api=${1:?}
	shift
	if [[ "$1" == {* && "$1" == *} ]]; then
		local json=$1
		shift
		"${cmd[@]}" -sSL http://localhost:3000${api} -H "X-Metabase-Session: $SESSIONID" -H 'Content-Type: application/json' --data-raw "$json" "$@"
	else
		"${cmd[@]}" -sSL http://localhost:3000${api} -H "X-Metabase-Session: $SESSIONID" "$@"
	fi
}

login() {
	[[ -n "$SESSIONID" ]] && return 0
	read -r -d '' JSON <<-EOF
		{
			"username": "${MB_ADMIN_EMAIL:?}",
			"password": "${MB_ADMIN_PASSWORD:?}"
		}
		EOF

	SESSIONID=`invoke /api/session "${JSON}" | jq -r '.id // empty'`
}

logout() {
	[[ -z "$SESSIONID" ]] && return 0

	invoke DELETE /api/session/
	SESSIONID=
}

updateEmbeddingSecretKey() {
	login

	read -r -d '' JSON <<-EOF
		{
			"value": "${MB_EMBEDDING_SECRET_KEY:?}",
			"is_env_setting": false,
			"env_name": "MB_EMBEDDING_SECRET_KEY",
			"description": "Secret key used to sign JSON Web Tokens for requests to /api/embed endpoints.",
			"default": null,
			"originalValue": null
		}
		EOF

	invoke PUT /api/setting/embedding-secret-key "$JSON"
}

defaultDashboard() {
	login

	# create default dashboard if not exists
	local code=`invoke /api/dashboard/1 -o /dev/null -w "%{http_code}"`
	[[ "$code" == "404" ]] && invoke /api/dashboard '{"name": "Dashboard"}' &>/dev/null

	# add default card
	local cards=`invoke /api/dashboard/1 | jq -r '.ordered_cards | length'`
	if [[ "$cards" == "0" ]]; then
		read -r -d '' JSON <<-EOF
			{"cards":[{"id":-1,"card_id":null,"row":0,"col":0,"sizeX":4,"sizeY":4,"series":[],"visualization_settings":{"virtual_card":{"name":null,"display":"text","visualization_settings":{},"dataset_query":{},"archived":false}},"parameter_mappings":[]}]}
			EOF
		invoke PUT /api/dashboard/1/cards "${JSON}" &>/dev/null
	fi

	[[ "$MB_ENABLE_EMBEDDING" == "true" ]] && invoke PUT /api/dashboard/1 '{"enable_embedding": true}' &>/dev/null
}

setup() {
	local USERSETUP=`invoke /api/session/properties 2>/dev/null | jq -r '.["has-user-setup"] // empty'`
	[[ "$USERSETUP" == "true" ]] && return 0

	local SETUPTOKEN=`invoke /api/session/properties 2>/dev/null | jq -r '.["setup-token"] // empty'`
	[[ -z "$SETUPTOKEN" ]] && return 0

	echo Metabase auto setup started.

	BOOTSTRAP_DB_JSON=
	if [[ "$MB_BOOTSTRAP_DB" == "true" ]]; then
		read -r -d '' BOOTSTRAP_DB_JSON <<-EOF
				"database": {
					"engine": "${MB_BOOTSTRAP_DB_TYPE:?}",
					"name": "${MB_BOOTSTRAP_DB_NAME:?}",
					"details": {
						"host": "${MB_BOOTSTRAP_DB_HOST:?}",
						"port": ${MB_BOOTSTRAP_DB_PORT:?},
						"dbname": "${MB_BOOTSTRAP_DB_DBNAME:?}",
						"user": "${MB_BOOTSTRAP_DB_USER:?}",
						"password": "${MB_BOOTSTRAP_DB_PASS:?}",
						"ssl": ${MB_BOOTSTRAP_DB_SSL:-false},
						"additional-options": "${MB_BOOTSTRAP_DB_OPTS}",
						"tunnel-enabled": ${MB_BOOTSTRAP_DB_TUNNEL:-false}
					},
					"is_full_sync": ${MB_BOOTSTRAP_DB_SYNC:-true},
					"schedules": {}
				},
			EOF
	fi
	read -r -d '' JSON <<-EOF
		{
			$BOOTSTRAP_DB_JSON
			"token": "$SETUPTOKEN",
			"prefs": {
				"site_name": "${MB_SITE_NAME:-Metabase}",
				"site_locale": "${MB_SITE_LOCALE:-en}",
				"allow_tracking": "false"
			},
			"user": {
				"first_name": "${MB_ADMIN_FIRSTNAME:?}",
				"last_name": "${MB_ADMIN_LASTNAME:?}",
				"email": "${MB_ADMIN_EMAIL:?}",
				"password": "${MB_ADMIN_PASSWORD:?}",
				"site_name": "${MB_SITE_NAME:-Metabase}"
			}
		}
		EOF

	# ignore plain text error if metabase has been set up
	local ERROR=`invoke /api/setup "$JSON" | jq -r '.errors // empty' 2>/dev/null`
	[[ -n "$ERROR" ]] && echo $ERROR && exit 1

	echo Metabase auto setup completed.

	if [[ "${MB_DEFAULT_DASHBOARD:-true}" == "true" ]]; then
		echo Default dashboard setup started.
		defaultDashboard
		echo Default dashboard setup completed.
	fi
}

"$@" &

while ! healthcheck; do
	sleep 5
done

setup
logout

wait